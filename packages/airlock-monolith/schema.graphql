extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])

### Payments

type Mutation {
  ### Reviews
  "Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse!
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(bookingId: ID!, guestReview: ReviewInput!): SubmitGuestReviewResponse!

  ### Wallet
  addFundsToWallet(amount: Float!): AddFundsToWalletResponse!
}

"ReviewInput is the bare minimum needed to submit a review, not tied to any target."
input ReviewInput {
  text: String!
  rating: Float!
}

"The response after submitting airlock-service-reviews for both host and location together."
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the host"
  hostReview: Review
  "Newly created review about the location"
  locationReview: Review
}

"The response after submitting airlock-service-reviews for a guest."
type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the guest"
  guestReview: Review
}

### Payments

type AddFundsToWalletResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Updated wallet amount"
  amount: Float
}
